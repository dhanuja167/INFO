ceaser cipher

import java.util.*;
class CaesarCipher {
char [] input;
int key;
void encrypt1(String ip,int key)
{
 input = ip.toCharArray();
 for(int i=0;i<input.length;i++)
 {
 if(input[i] == ' ')
 continue;
 else
 {
 if(input[i] >='A' && input[i] <='Z')
 {
 input[i] = (char) (key + input[i]);
 if(input[i] > 'Z')
 {
 input[i] = (char) (input[i] - 26);
 }
 }
 else
 {
 input[i] = (char) (key + input[i]);
 if(input[i] > 'z')
 {
 input[i] = (char) (input[i] - 26);
 }
 }
 }
 }
 System.out.println("Encrypted String : " + String.valueOf(input) + "\n");
}
 void encrypt()
{
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter the String : ");
 String ip = sc.nextLine();
 input = ip.toCharArray();
 System.out.print("Enter the key : ");
 key = sc.nextInt();
 for(int i=0;i<input.length;i++)
 {
 if(input[i] == ' ')
 continue;
 else
 {
 if(input[i] >='A' && input[i] <='Z')
 {
 input[i] = (char) (key + input[i]);
 if(input[i] > 'Z')
 {
 input[i] = (char) (input[i] - 26);
 }
 }
 else
 {
 input[i] = (char) (key + input[i]);
 if(input[i] > 'z')
 {
 input[i] = (char) (input[i] - 26);
 }
 }
 }
 }
 System.out.println("Encrypted String : " + String.valueOf(input) + "\n");
}
 void decrypt()
{
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter the String : ");
 String ip = sc.nextLine();
 input = ip.toCharArray();
 System.out.print("Enter the key : ");
 key = sc.nextInt();
 for(int i=0;i<input.length;i++)
 {
 if(input[i] == ' ')
 continue;
 else
 {
 if(input[i] >='A' && input[i] <='Z')
 {
 input[i] = (char) (input[i] - key);
 if(input[i] < 'A')
 {
 input[i] = (char) (input[i] + 26);
 }
 }
 else
 {
 input[i] = (char) (input[i] - key);
 if(input[i] < 'a')
 {
 input[i] = (char) (input[i] + 26);
 }
 }
 }
 }
 System.out.println("Decrypted String : " + String.valueOf(input) + "\n");
}
void decrypt1(String ip,int key)
{
 input = ip.toCharArray();
 for(int i=0;i<input.length;i++)
 {
 if(input[i] == ' ')
 continue;
 else
 {
 if(input[i] >='A' && input[i] <='Z')
 {
 input[i] = (char) (input[i] - key);
 if(input[i] < 'A')
 {
 input[i] = (char) (input[i] + 26);
 }
 }
 else
 {
 input[i] = (char) (input[i] - key);
 if(input[i] < 'a')
 {
 input[i] = (char) (input[i] + 26);
 }
 }
 }
 }
 System.out.println("The plain text is : " + String.valueOf(input) + "\n");
}
static final int ASCII_SIZE = 256;
public char getMaxOccuringChar(String str) {
 // Create array to keep the count of individual
 // characters and initialize the array as 0
 int count[] = new int[ASCII_SIZE];
 // Construct character count array from the input
 // string.
 int len = str.length();
 for (int i = 0; i < len; i++)
 count[str.charAt(i)]++;
 int max = -1; // Initialize max count
 char result = ' '; // Initialize result
 // Traversing through the string and maintaining
 // the count of each character
 for (int i = 0; i < len; i++) {
 if (max < count[str.charAt(i)]) {
 max = count[str.charAt(i)];
 result = str.charAt(i);
 }
 }
 return result;
 }
 void bruteforce()
{
 Scanner sc = new Scanner(System.in);
 System.out.print("Enter the String : ");
 String ip = sc.nextLine();
 input = ip.toCharArray();
 for(key=1;key<27;key++)
 {
 for(int i=0;i<input.length;i++)
 {
 if(input[i] == ' ')
 continue;
 else
 {
 if(input[i] >='A' && input[i] <='Z')
 {
 input[i] = (char) (input[i] - key);
 if(input[i] < 'A')
 {
 input[i] = (char) (input[i] + 26);
 }
 }
 else
 {
 input[i] = (char) (input[i] - key);
 if(input[i] < 'a')
 {
 input[i] = (char) (input[i] + 26);
 }
 }
 }
 }
 System.out.println("Key = " + key + " Decrypted String : " + String.valueOf(input));
 input = ip.toCharArray();
 }
}
void FrequencyAnalysis(){
 Scanner ip = new Scanner(System.in);
 String plainText = "";
 String cipherText = "";
 String cPlainText = "";
 String ALPHABET = "abcdefghijklmnopqrstuvwxyz";
 System.out.println("Enter the cipher text to be decrypted: ");
 cipherText = ip.next();
 char freq = new CaesarCipher().getMaxOccuringChar(cipherText);
 System.out.println("The most recurring cipher letter is:"+ freq);
 System.out.println("Enter the most recurring cipher letter ");
 char c = ip.next().charAt(0);
 System.out.println("Enter the plain letter corresponding to " + c + ": ");
 char p = ip.next().charAt(0);
 int cpos = ALPHABET.indexOf(c);
 int ppos = ALPHABET.indexOf(p);
 int keyVal = (cpos - ppos) % 26;
 System.out.println("Key value: " + keyVal);
 decrypt1(cipherText, keyVal);
 
}
 
public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
 int c;
 do
 {
 System.out.println("1:Encryption\n2:Decryption\n3:Bruteforce\n4:Frequency Analysis\n5:Exit");
 c = sc.nextInt();
 switch(c)
 {
 case 1 : new CaesarCipher().encrypt(); break;
 case 2 : new CaesarCipher().decrypt(); break;
 case 3 : new CaesarCipher().bruteforce(); break;
 case 4 : new CaesarCipher().FrequencyAnalysis(); break;
 case 5 : break;
 }
 }while(c!=4);
}
}